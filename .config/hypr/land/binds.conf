# #################### 定义按键 ############################
#
#   #### 用wev工具查询按键编码

# 定义常用的按键, 根据自身需求来就行
$mainMod = SUPER
$nMod = ALT

# 配置一些按键需要的默认值
$terminal = alacritty	# 默认终端模拟器
# $terminal = kitty	# 默认终端模拟器
$fileManager = thunar	# 文件管理工具,pcmanfm比较轻量，本身就不常用
$menu = rofi -modi drun,run -show drun -font "DejaVu Sans 10" -show-icons  # 快速应用启动工具
$screen_file=${HOME}/Pictures/ScreenShot/screen_shot_$(date +"%Y-%m-%d_%H-%M-%S").png # 截图的默认存放位置


bind = $mainMod, T, exec, $terminal
bind = $mainMod, K, exec, kitty
bind = $mainMod, C, killactive,
# bind = $mainMod, Q, killactive,
bind = $mainMod, M, exit,
bind = $mainMod, E, exec, $fileManager
bind = $mainMod, V, togglefloating, # 切换窗口浮动
bind = $mainMod, V, centerwindow # 浮动窗口剧中
bindr = $mainMod, R, exec, pkill rofi || $menu
bindr = $mainMod, W, exec, pkill wofi || wofi --show
bind = $mainMod, P, pin, # 固定窗口到最顶,,层
# bind = $mainMod $nMod, J, togglesplit,  # 切换窗口分割方向
bind = $mainMod, F, fullscreen,1    # 窗口全屏,部占据bar的位置（保留间隙）
# bind=$mainMod,D,fullscreenstate, 0, 3    # 窗口内全屏
bind = $mainMod SHIFT_L, F, fullscreen, 0    # 窗口全屏
bind = $mainMod SHIFT_L, W, exec, pkill wlogout || wlogout -b 5


# ##### 历史剪切板
bind = $mainMod SHIFT_L, V, exec, cliphist list | rofi -dmenu | cliphirt decode | wl-copy

# 锁屏
$screenLock = hyprlock -q -c $($HOME/.config/hypr/hyprlock.sh)
bind = $mainMod, code:47, exec,$screenLock

# 快捷键关闭和启用waybar
# $bar = waybar --config ~/.config/waybar/default/config --style ~/.config/waybar/default/style.css
$bar = sh ~/.config/waybar/waybar.sh
$killBarId = `/bin/ps -fu $USER | grep " waybar" | grep -v "grep" | awk '{print $2}'`
bind = $mainMod , B, exec ,kill $killBarId || $bar

# # 屏幕亮度调整
binde = $mainMod, bracketleft , exec , brightnessctl set 5%- > /dev/null
binde = $mainMod, bracketright , exec , brightnessctl set 5%+ > /dev/null
binde = $mainMod, 51, exec, brightnessctl set 80% > /dev/null

# #截图相关
bind = $mainMod, A, exec, grim -g "$(slurp)" - | wl-copy > /dev/null # 截图，需要自己选择截图，保存到剪切板
bind = , Print, exec, grim $screen_file > /dev/null # 全屏，保存到指定目录
bind = $mainMod, Print,exec, grim -g "$(slurp)" $screen_file> /dev/null # 自己选择，但是保存到指定目录
bind = $nMod, A,exec, grim - | wl-copy > /dev/null # 全屏，并且保存到剪切板

# 音乐切换（上/下 一首歌曲）
bind = $nMod, code:60, exec, mpc next > /dev/null
bind = $nMod, code:59, exec, mpc prev > /dev/null
bind = $nMod, code:65, exec, mpc toggle > /dev/null

# # 声音调整
binde = $nMod , bracketleft , exec ,pactl set-sink-volume @DEFAULT_SINK@ -5% > /dev/null
binde = $nMod , bracketright , exec ,pactl set-sink-volume @DEFAULT_SINK@ +5% > /dev/null
binde = $nMod SHIFT, bracketleft , exec ,pactl set-sink-volume @DEFAULT_SINK@ -15% > /dev/null
binde = $nMod SHIFT, bracketright , exec ,pactl set-sink-volume @DEFAULT_SINK@ +15% > /dev/null
binde = $nMod ,51 , exec , pactl set-sink-volume @DEFAULT_SINK@ 80% > /dev/null

# 切换窗口
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

# 切换指定工作区域
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# 将窗口移动到指定的工作区域
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# 移动到上一个或下一个workspaces
bind = $mainMod , J, workspace , -1
bind = $mainMod , L, workspace , +1
bind = $mainMod CTRL, left, workspace , -1
bind = $mainMod CTRL, right, workspace , +1

# 带着当前窗口移动到上一个或下一个workspaces
bind = $mainMod SHIFT, left, movetoworkspace , -1 
bind = $mainMod SHIFT, right, movetoworkspace , +1 


# Example special workspace (scratchpad)没搞懂, 但是我常用
# 相当于在当前工作区域临时创建一个工作区域,但是它不包含在原本的工作区域内
# mainMod + s 来回切换两个区域, 但是在1工作区域创建的和在3工作区域是同一个,
# 也就是说你有且只能创建一个临时工作区域
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic

# 鼠标滚轮切换工作区域
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# 鼠标调整活动窗口位置/大小
bindm = $mainMod, mouse:272, movewindow
# bindm = $mainMod, mouse:273, resizewindow
bindm = $nMod, mouse:272, resizewindow

# #### 键盘调整窗口大小
binde=$nMod,right,resizeactive,15 0
binde=$nMod,left,resizeactive,-15 0
binde=$nMod,up,resizeactive,0 -15
binde=$nMod,down,resizeactive,0 15

# 键盘调整浮动窗口位置
binde = $mainMod SHIFT, L,moveactive,20 0
binde = $mainMod SHIFT, J,moveactive,-20 0
binde = $mainMod SHIFT, I,moveactive,0 -20
binde = $mainMod SHIFT, K,moveactive,0 20

# 键盘调整调整窗口大小
binde = $mainMod $nMod,right,movewindow, r
binde = $mainMod $nMod,left,movewindow, l
binde = $mainMod $nMod,up,movewindow, u
binde = $mainMod $nMod,down,movewindow, d

